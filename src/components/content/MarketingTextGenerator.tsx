
import React, { useState } from "react";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Copy, Wand2 } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";

const MarketingTextGenerator: React.FC = () => {
  const { t } = useTranslation();
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedText, setGeneratedText] = useState("");
  const [productInfo, setProductInfo] = useState("");
  const [textType, setTextType] = useState("instagram");
  const [tone, setTone] = useState("professional");

  const handleGenerate = () => {
    if (!productInfo.trim()) {
      toast({
        title: "ูุนูููุงุช ุงูููุชุฌ ูุทููุจุฉ",
        description: "ูุฑุฌู ุฅุฏุฎุงู ูุนูููุงุช ุงูููุชุฌ ูุฅูุดุงุก ุงููุต",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);
    setTimeout(() => {
      // Simulate AI generation
      const demoTexts = {
        instagram: "โจ ุงูุชุดูู ุณุฑ ุงูุจุดุฑุฉ ุงููุซุงููุฉ ูุน ูุฑูู ุชุฑุทูุจ ูุงุฆู ูู ูุฌููุนุชูุง ุงูุฌุฏูุฏุฉ! ๐ซ ูููุญู ุจุดุฑุฉ ูุถุฑุฉ ููุดุฑูุฉ ุทูุงู ุงูููู. ูุชููุฑ ุงูุขู ูู ูุชุงุฌุฑูุง ูุนูู ูููุนูุง ุงูุฅููุชุฑููู! ๐๏ธ #ูุณุชุญุถุฑุงุช_ุชุฌููู #ุนูุงูุฉ_ุจุงูุจุดุฑุฉ",
        facebook: "ุฃุทูููุง ููุชู ูุฑูู ุงูุชุฑุทูุจ ุงููุงุฆู ุงูุฌุฏูุฏุ ุงููุตูู ุฎุตูุตูุง ููุจุดุฑุฉ ุงูุฌุงูุฉ ูุงูุญุณุงุณุฉ. ูุญุชูู ุนูู ูุฒูุฌ ูุฑูุฏ ูู ุงูููุชุงูููุงุช ูุงูููููุงุช ุงูุทุจูุนูุฉ ุงูุชู ุชุนุฒุฒ ูุถุงุฑุฉ ุงูุจุดุฑุฉ ูุฅุดุฑุงููุง. ุงุณุชูุชุนู ุจุจุดุฑุฉ ุฑุทุจุฉ ููุงุนูุฉ ูุน ุงุณุชุฎุฏุงู ููุชุธู. ูุชููุฑ ุงูุขู ูู ุฌููุน ูุฑูุนูุง ูุนูู ูููุนูุง ุงูุฅููุชุฑููู.",
        website: `<h2>ูุฑูู ุงูุชุฑุทูุจ ุงููุงุฆู - ุงูุญู ุงููุซุงูู ููุจุดุฑุฉ ุงูุฌุงูุฉ</h2>
        <p>ุชูุฏู ููู ูุฌููุนุชูุง ุงูุฌุฏูุฏุฉ ูุฑูู ุงูุชุฑุทูุจ ุงููุงุฆูุ ุงููุตูู ุฎุตูุตูุง ูููุญ ุจุดุฑุชูู ุงูุชุฑุทูุจ ุงูุนููู ุงูุฐู ุชุญุชุงุฌู.</p>
        <ul>
          <li>ุชุฑุทูุจ ูุฏูู 24 ุณุงุนุฉ</li>
          <li>ุฎุงูู ูู ุงูููุงุฏ ุงูุญุงูุธุฉ ุงูุถุงุฑุฉ</li>
          <li>ููุงุณุจ ูุฌููุน ุฃููุงุน ุงูุจุดุฑุฉ</li>
          <li>ูุนุฒุฒ ุจููุชุงููู E ูุฒุจุฏุฉ ุงูุดูุง</li>
        </ul>
        <p>ุงูุชุดูู ุงููุฑู ูู ุฃูู ุงุณุชุฎุฏุงู!</p>`,
        email: "ุนุฒูุฒุชู ุงูุนูููุฉุ\n\nููุฏ ุฃู ูุนุฑูู ุจููุชุฌูุง ุงูุฌุฏูุฏ: ูุฑูู ุงูุชุฑุทูุจ ุงููุงุฆู.\n\nุตููู ูุฐุง ุงููุฑูู ุฎุตูุตูุง ููุจุดุฑุฉ ุงูุฌุงูุฉ ูุงูุญุณุงุณุฉุ ููููุญูุง ุชุฑุทูุจูุง ุนููููุง ูุฏูู ุทูุงู ุงูููู. ุจูุถู ุชุฑููุจุชู ุงูุบููุฉ ุจูุณุชุฎูุตุงุช ุทุจูุนูุฉ ูููุชุงูููุงุช ุฃุณุงุณูุฉุ ุณูููุญ ุจุดุฑุชู ุงููุนููุฉ ูุงูุฅุดุฑุงู ุงูุฐู ุชุณุชุญูููู.\n\nุงุณุชูุชุนู ุจุฎุตู 15% ุนูู ุฃูู ุนูููุฉ ุดุฑุงุก. ุงุณุชุฎุฏูู ุงูุฑูุฒ: HYDRA15\n\nูุน ุฃุทูุจ ุงูุชุญูุงุชุ\nูุฑูู ุงูุชุฌููู"
      };
      
      setGeneratedText(demoTexts[textType as keyof typeof demoTexts]);
      setIsGenerating(false);
      
      toast({
        title: "ุชู ุฅูุดุงุก ุงููุต",
        description: "ุชู ุฅูุดุงุก ุงููุต ุงูุชุณูููู ุจูุฌุงุญ",
      });
    }, 2000);
  };

  const handleCopyText = () => {
    navigator.clipboard.writeText(generatedText);
    toast({
      title: "ุชู ุงููุณุฎ",
      description: "ุชู ูุณุฎ ุงููุต ุฅูู ุงูุญุงูุธุฉ",
    });
  };

  return (
    <div className="grid md:grid-cols-2 gap-8">
      <div>
        <h2 className="text-xl font-bold mb-4">ุฅูุดุงุก ูุตูุต ุชุณููููุฉ</h2>
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="productInfo">ูุนูููุงุช ุงูููุชุฌ</Label>
            <Textarea
              id="productInfo"
              placeholder="ุฃุฏุฎู ุงุณู ููุนูููุงุช ุงูููุชุฌุ ุฎุตุงุฆุตูุ ูุงูููุงุฆุฏ ุงูุฑุฆูุณูุฉ..."
              value={productInfo}
              onChange={(e) => setProductInfo(e.target.value)}
              rows={5}
            />
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="textType">ููุน ุงููุต</Label>
              <Select value={textType} onValueChange={setTextType}>
                <SelectTrigger id="textType">
                  <SelectValue placeholder="ุงุฎุชุฑ ููุน ุงููุต" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="instagram">ุงูุณุชุฌุฑุงู</SelectItem>
                  <SelectItem value="facebook">ููุณุจูู</SelectItem>
                  <SelectItem value="website">ูููุน ุงูููุจ</SelectItem>
                  <SelectItem value="email">ุจุฑูุฏ ุฅููุชุฑููู</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="tone">ูุจุฑุฉ ุงููุต</Label>
              <Select value={tone} onValueChange={setTone}>
                <SelectTrigger id="tone">
                  <SelectValue placeholder="ุงุฎุชุฑ ูุจุฑุฉ ุงููุต" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="professional">ุงุญุชุฑุงููุฉ</SelectItem>
                  <SelectItem value="friendly">ูุฏูุฉ</SelectItem>
                  <SelectItem value="luxury">ูุงุฎุฑุฉ</SelectItem>
                  <SelectItem value="energetic">ุญูุงุณูุฉ</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          
          <div className="pt-2">
            <Button onClick={handleGenerate} disabled={isGenerating}>
              {isGenerating ? (
                <>ุฌุงุฑู ุงูุฅูุดุงุก...</>
              ) : (
                <>
                  <Wand2 className="mr-2 h-4 w-4" />
                  ุฅูุดุงุก ุงููุต
                </>
              )}
            </Button>
          </div>
        </div>
      </div>
      
      <div>
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">ุงููุต ุงููููุดุฃ</h2>
          {textType && generatedText && (
            <Badge variant="outline">{textType === "instagram" ? "ุงูุณุชุฌุฑุงู" : 
                                     textType === "facebook" ? "ููุณุจูู" : 
                                     textType === "website" ? "ูููุน ุงูููุจ" : "ุจุฑูุฏ ุฅููุชุฑููู"}</Badge>
          )}
        </div>
        
        <Card className="min-h-[300px] mb-4">
          <CardContent className="p-4">
            {generatedText ? (
              textType === "website" ? (
                <div className="prose prose-sm" dangerouslySetInnerHTML={{ __html: generatedText }} />
              ) : (
                <div className="whitespace-pre-wrap">{generatedText}</div>
              )
            ) : (
              <div className="text-muted-foreground h-full flex items-center justify-center">
                ุงููุต ุงููููุดุฃ ุณูุธูุฑ ููุง
              </div>
            )}
          </CardContent>
        </Card>
        
        {generatedText && (
          <Button variant="outline" onClick={handleCopyText} className="w-full">
            <Copy className="mr-2 h-4 w-4" />
            ูุณุฎ ุงููุต
          </Button>
        )}
      </div>
    </div>
  );
};

export default MarketingTextGenerator;
